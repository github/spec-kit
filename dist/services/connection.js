define("services/connection",[],()=>(()=>{"use strict";var n,e={36:function(n,e,t){var o,i=this&&this.__createBinding||(Object.create?function(n,e,t,o){void 0===o&&(o=t);var i=Object.getOwnPropertyDescriptor(e,t);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[t]}}),Object.defineProperty(n,o,i)}:function(n,e,t,o){void 0===o&&(o=t),n[o]=e[t]}),a=this&&this.__setModuleDefault||(Object.create?function(n,e){Object.defineProperty(n,"default",{enumerable:!0,value:e})}:function(n,e){n.default=e}),s=this&&this.__importStar||(o=function(n){return o=Object.getOwnPropertyNames||function(n){var e=[];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[e.length]=t);return e},o(n)},function(n){if(n&&n.__esModule)return n;var e={};if(null!=n)for(var t=o(n),s=0;s<t.length;s++)"default"!==t[s]&&i(e,n,t[s]);return a(e,n),e});Object.defineProperty(e,"__esModule",{value:!0});const c=s(t(899));class r{constructor(){this.projectId="",this.connections=[],this.initialize()}async initialize(){var n;await c.init(),await c.ready();const e=c.getWebContext();this.projectId=(null===(n=e.project)||void 0===n?void 0:n.id)||"",await this.loadConnections(),this.setupEventHandlers(),this.renderUI()}async loadConnections(){try{this.connections=[{id:"openai-gpt4",name:"OpenAI GPT-4",provider:"openai",baseUrl:"https://api.openai.com/v1",model:"gpt-4",apiKey:"*********************",maxTokens:2e3,temperature:.7,isDefault:!0,isActive:!0},{id:"azure-openai-gpt4",name:"Azure OpenAI GPT-4",provider:"azure-openai",baseUrl:"https://your-resource.openai.azure.com",model:"gpt-4",apiKey:"*********************",maxTokens:2e3,temperature:.7,isDefault:!1,isActive:!1}]}catch(n){console.error("Error loading connections:",n)}}renderUI(){const n=document.getElementById("service-connection-container");n&&(n.innerHTML=`\n            <div class="service-connection-manager">\n                <div class="header">\n                    <h2>LLM Service Connections</h2>\n                    <button class="btn primary" onclick="this.showAddConnectionDialog()">\n                        + Add Connection\n                    </button>\n                </div>\n                \n                <div class="connections-list">\n                    ${this.connections.map(n=>this.renderConnectionCard(n)).join("")}\n                </div>\n                \n                <div class="connection-dialog" id="connection-dialog" style="display: none;">\n                    ${this.renderConnectionDialog()}\n                </div>\n            </div>\n        `)}renderConnectionCard(n){return`\n            <div class="connection-card ${n.isActive?"active":""} ${n.isDefault?"default":""}">\n                <div class="connection-header">\n                    <div class="connection-info">\n                        <h3>${n.name}</h3>\n                        <span class="provider">${n.provider}</span>\n                        ${n.isDefault?'<span class="badge default">Default</span>':""}\n                    </div>\n                    <div class="connection-actions">\n                        <button class="btn-icon" onclick="this.editConnection('${n.id}')" title="Edit">\n                            ‚úèÔ∏è\n                        </button>\n                        <button class="btn-icon" onclick="this.testConnection('${n.id}')" title="Test">\n                            üîç\n                        </button>\n                        <button class="btn-icon delete" onclick="this.deleteConnection('${n.id}')" title="Delete">\n                            üóëÔ∏è\n                        </button>\n                    </div>\n                </div>\n                \n                <div class="connection-details">\n                    <div class="detail-row">\n                        <span class="label">Model:</span>\n                        <span class="value">${n.model}</span>\n                    </div>\n                    <div class="detail-row">\n                        <span class="label">Base URL:</span>\n                        <span class="value">${n.baseUrl}</span>\n                    </div>\n                    <div class="detail-row">\n                        <span class="label">Max Tokens:</span>\n                        <span class="value">${n.maxTokens}</span>\n                    </div>\n                    <div class="detail-row">\n                        <span class="label">Temperature:</span>\n                        <span class="value">${n.temperature}</span>\n                    </div>\n                </div>\n                \n                <div class="connection-status">\n                    <span class="status ${n.isActive?"active":"inactive"}">\n                        ${n.isActive?"üü¢ Active":"üî¥ Inactive"}\n                    </span>\n                    <button class="btn secondary small" onclick="this.toggleConnection('${n.id}')">\n                        ${n.isActive?"Deactivate":"Activate"}\n                    </button>\n                    ${n.isDefault?"":`\n                        <button class="btn secondary small" onclick="this.setAsDefault('${n.id}')">\n                            Set as Default\n                        </button>\n                    `}\n                </div>\n            </div>\n        `}renderConnectionDialog(){return'\n            <div class="dialog-content">\n                <div class="dialog-header">\n                    <h3 id="dialog-title">Add LLM Connection</h3>\n                    <button class="btn-close" onclick="this.hideConnectionDialog()">√ó</button>\n                </div>\n                \n                <form id="connection-form" onsubmit="this.saveConnection(event)">\n                    <div class="form-group">\n                        <label for="connection-name">Connection Name</label>\n                        <input type="text" id="connection-name" required>\n                    </div>\n                    \n                    <div class="form-group">\n                        <label for="connection-provider">Provider</label>\n                        <select id="connection-provider" onchange="this.onProviderChange()">\n                            <option value="openai">OpenAI</option>\n                            <option value="azure-openai">Azure OpenAI</option>\n                            <option value="anthropic">Anthropic</option>\n                            <option value="custom">Custom</option>\n                        </select>\n                    </div>\n                    \n                    <div class="form-group">\n                        <label for="connection-base-url">Base URL</label>\n                        <input type="url" id="connection-base-url" required>\n                    </div>\n                    \n                    <div class="form-group">\n                        <label for="connection-model">Model</label>\n                        <input type="text" id="connection-model" required>\n                    </div>\n                    \n                    <div class="form-group">\n                        <label for="connection-api-key">API Key</label>\n                        <input type="password" id="connection-api-key" required>\n                    </div>\n                    \n                    <div class="form-row">\n                        <div class="form-group">\n                            <label for="connection-max-tokens">Max Tokens</label>\n                            <input type="number" id="connection-max-tokens" value="2000" min="1" max="8000">\n                        </div>\n                        \n                        <div class="form-group">\n                            <label for="connection-temperature">Temperature</label>\n                            <input type="number" id="connection-temperature" value="0.7" min="0" max="2" step="0.1">\n                        </div>\n                    </div>\n                    \n                    <div class="form-group">\n                        <label>\n                            <input type="checkbox" id="connection-default"> Set as default connection\n                        </label>\n                    </div>\n                    \n                    <div class="dialog-actions">\n                        <button type="button" class="btn secondary" onclick="this.hideConnectionDialog()">\n                            Cancel\n                        </button>\n                        <button type="submit" class="btn primary">\n                            Save Connection\n                        </button>\n                    </div>\n                </form>\n            </div>\n        '}setupEventHandlers(){}showAddConnectionDialog(){const n=document.getElementById("connection-dialog");n&&(n.style.display="block")}hideConnectionDialog(){const n=document.getElementById("connection-dialog");n&&(n.style.display="none")}async testConnection(n){const e=this.connections.find(e=>e.id===n);if(e)try{console.log(`Testing connection: ${e.name}`)}catch(n){console.error("Connection test failed:",n)}}async toggleConnection(n){const e=this.connections.find(e=>e.id===n);e&&(e.isActive=!e.isActive,this.renderUI())}async setAsDefault(n){this.connections.forEach(e=>e.isDefault=e.id===n),this.renderUI()}async deleteConnection(n){confirm("Are you sure you want to delete this connection?")&&(this.connections=this.connections.filter(e=>e.id!==n),this.renderUI())}async saveConnection(n){n.preventDefault(),this.hideConnectionDialog(),await this.loadConnections(),this.renderUI()}onProviderChange(){var n;const e=null===(n=document.getElementById("connection-provider"))||void 0===n?void 0:n.value,t=document.getElementById("connection-base-url"),o=document.getElementById("connection-model");"openai"===e?(t.value="https://api.openai.com/v1",o.value="gpt-4"):"azure-openai"===e?(t.value="https://your-resource.openai.azure.com",o.value="gpt-4"):"anthropic"===e&&(t.value="https://api.anthropic.com",o.value="claude-3-opus-20240229")}}c.ready().then(()=>{new r})}},t={};function o(n){var i=t[n];if(void 0!==i)return i.exports;var a=t[n]={exports:{}};return e[n].call(a.exports,a,a.exports,o),a.exports}o.m=e,n=[],o.O=(e,t,i,a)=>{if(!t){var s=1/0;for(d=0;d<n.length;d++){for(var[t,i,a]=n[d],c=!0,r=0;r<t.length;r++)(!1&a||s>=a)&&Object.keys(o.O).every(n=>o.O[n](t[r]))?t.splice(r--,1):(c=!1,a<s&&(s=a));if(c){n.splice(d--,1);var l=i();void 0!==l&&(e=l)}}return e}a=a||0;for(var d=n.length;d>0&&n[d-1][2]>a;d--)n[d]=n[d-1];n[d]=[t,i,a]},o.d=(n,e)=>{for(var t in e)o.o(e,t)&&!o.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},o.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),o.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},(()=>{var n={950:0};o.O.j=e=>0===n[e];var e=(e,t)=>{var i,a,[s,c,r]=t,l=0;if(s.some(e=>0!==n[e])){for(i in c)o.o(c,i)&&(o.m[i]=c[i]);if(r)var d=r(o)}for(e&&e(t);l<s.length;l++)a=s[l],o.o(n,a)&&n[a]&&n[a][0](),n[a]=0;return o.O(d)},t=self.webpackChunkspec_kit_azure_devops_extension=self.webpackChunkspec_kit_azure_devops_extension||[];t.forEach(e.bind(null,0)),t.push=e.bind(null,t.push.bind(t))})();var i=o.O(void 0,[76],()=>o(36));return o.O(i)})());
//# sourceMappingURL=connection.js.map