{"version":3,"file":"hub/hub.js","mappings":"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","sources":["webpack://spec-kit-azure-devops-extension/webpack/runtime/chunk loaded","webpack://spec-kit-azure-devops-extension/./src/hub/hub.ts","webpack://spec-kit-azure-devops-extension/webpack/bootstrap","webpack://spec-kit-azure-devops-extension/webpack/runtime/define property getters","webpack://spec-kit-azure-devops-extension/webpack/runtime/hasOwnProperty shorthand","webpack://spec-kit-azure-devops-extension/webpack/runtime/make namespace object","webpack://spec-kit-azure-devops-extension/webpack/runtime/jsonp chunk loading","webpack://spec-kit-azure-devops-extension/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import * as SDK from \"azure-devops-extension-sdk\";\r\nimport { IProjectPageService, CommonServiceIds } from \"azure-devops-extension-api\";\r\nimport { SpecKitOrchestrator } from \"../services/orchestrator\";\r\nimport { RepositoryService } from \"../services/repository\";\r\nimport { TelemetryService } from \"../services/telemetry\";\r\nimport { LLMService } from \"../services/llm\";\r\n\r\ninterface WorkflowRun {\r\n    id: string;\r\n    timestamp: Date;\r\n    workflow: 'specify' | 'plan' | 'tasks';\r\n    workItemId: number;\r\n    workItemTitle: string;\r\n    status: 'running' | 'success' | 'failed';\r\n    duration?: number;\r\n    cost?: number;\r\n    errorMessage?: string;\r\n}\r\n\r\nclass SpecKitHub {\r\n    private orchestrator: SpecKitOrchestrator;\r\n    private repositoryService: RepositoryService;\r\n    private telemetryService: TelemetryService;\r\n    private llmService: LLMService;\r\n    private currentProject: any;\r\n\r\n    constructor() {\r\n        this.orchestrator = new SpecKitOrchestrator();\r\n        this.repositoryService = new RepositoryService();\r\n        this.telemetryService = new TelemetryService();\r\n        this.llmService = new LLMService();\r\n    }\r\n\r\n    public async initialize(): Promise<void> {\r\n        await SDK.init();\r\n        await SDK.ready();\r\n\r\n        // Get current project context\r\n        const projectService = await SDK.getService<IProjectPageService>(CommonServiceIds.ProjectPageService);\r\n        this.currentProject = await projectService.getProject();\r\n\r\n        this.setupEventHandlers();\r\n        await this.loadProjectStatus();\r\n        await this.loadRecentActivity();\r\n    }\r\n\r\n    private setupEventHandlers(): void {\r\n        // Workflow buttons\r\n        document.getElementById('run-specify')?.addEventListener('click', () => this.runWorkflow('specify'));\r\n        document.getElementById('run-plan')?.addEventListener('click', () => this.runWorkflow('plan'));\r\n        document.getElementById('run-tasks')?.addEventListener('click', () => this.runWorkflow('tasks'));\r\n\r\n        // Repository actions\r\n        document.getElementById('seed-repo')?.addEventListener('click', () => this.seedRepository());\r\n        document.getElementById('configure-settings')?.addEventListener('click', () => this.openSettings());\r\n\r\n        // Analytics\r\n        document.getElementById('view-analytics')?.addEventListener('click', () => this.viewAnalytics());\r\n        document.getElementById('export-data')?.addEventListener('click', () => this.exportData());\r\n\r\n        // LLM management\r\n        document.getElementById('manage-llm')?.addEventListener('click', () => this.manageLLM());\r\n        document.getElementById('test-connection')?.addEventListener('click', () => this.testLLMConnection());\r\n    }\r\n\r\n    private async loadProjectStatus(): Promise<void> {\r\n        const statusElement = document.getElementById('project-status');\r\n        if (!statusElement) return;\r\n\r\n        try {\r\n            const status = await this.getProjectSpecKitStatus();\r\n            statusElement.innerHTML = this.renderProjectStatus(status);\r\n        } catch (error) {\r\n            statusElement.innerHTML = `<div class=\"error\">Failed to load project status: ${error}</div>`;\r\n        }\r\n    }\r\n\r\n    private async getProjectSpecKitStatus(): Promise<any> {\r\n        // Check if repository is seeded\r\n        const isSeeded = await this.repositoryService.isRepositorySeeded(this.currentProject.id);\r\n        \r\n        // Get LLM connection status\r\n        const llmConnections = await this.llmService.getProjectConnections(this.currentProject.id);\r\n        \r\n        // Get recent metrics\r\n        const metrics = await this.telemetryService.getProjectMetrics(this.currentProject.id);\r\n\r\n        return {\r\n            isSeeded,\r\n            llmConnections: llmConnections.length,\r\n            defaultLLM: llmConnections.find(c => c.isDefault)?.name || 'None',\r\n            totalRuns: metrics.totalRuns || 0,\r\n            successRate: metrics.successRate || 0,\r\n            avgCost: metrics.avgCost || 0\r\n        };\r\n    }\r\n\r\n    private renderProjectStatus(status: any): string {\r\n        return `\r\n            <div class=\"status-grid\">\r\n                <div class=\"status-item\">\r\n                    <strong>Repository Status:</strong> \r\n                    <span class=\"${status.isSeeded ? 'status-success' : 'status-warning'}\">\r\n                        ${status.isSeeded ? '✅ Seeded' : '⚠️ Not Seeded'}\r\n                    </span>\r\n                </div>\r\n                <div class=\"status-item\">\r\n                    <strong>LLM Connections:</strong> ${status.llmConnections}\r\n                </div>\r\n                <div class=\"status-item\">\r\n                    <strong>Default LLM:</strong> ${status.defaultLLM}\r\n                </div>\r\n                <div class=\"status-item\">\r\n                    <strong>Total Runs:</strong> ${status.totalRuns}\r\n                </div>\r\n                <div class=\"status-item\">\r\n                    <strong>Success Rate:</strong> ${(status.successRate * 100).toFixed(1)}%\r\n                </div>\r\n                <div class=\"status-item\">\r\n                    <strong>Avg Cost per Run:</strong> $${status.avgCost.toFixed(3)}\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    private async loadRecentActivity(): Promise<void> {\r\n        const tbody = document.getElementById('history-tbody');\r\n        if (!tbody) return;\r\n\r\n        try {\r\n            const runs = await this.telemetryService.getRecentRuns(this.currentProject.id, 10);\r\n            tbody.innerHTML = runs.map(run => this.renderWorkflowRun(run)).join('');\r\n        } catch (error) {\r\n            tbody.innerHTML = `<tr><td colspan=\"7\" class=\"error\">Failed to load activity: ${error}</td></tr>`;\r\n        }\r\n    }\r\n\r\n    private renderWorkflowRun(run: WorkflowRun): string {\r\n        const statusClass = `status-${run.status}`;\r\n        const duration = run.duration ? `${(run.duration / 1000).toFixed(1)}s` : '-';\r\n        const cost = run.cost ? `$${run.cost.toFixed(3)}` : '-';\r\n\r\n        return `\r\n            <tr>\r\n                <td>${run.timestamp.toLocaleString()}</td>\r\n                <td><code>/${run.workflow}</code></td>\r\n                <td><a href=\"#\" onclick=\"openWorkItem(${run.workItemId})\">#${run.workItemId}</a></td>\r\n                <td><span class=\"status-badge ${statusClass}\">${run.status}</span></td>\r\n                <td>${duration}</td>\r\n                <td class=\"cost-info\">${cost}</td>\r\n                <td>\r\n                    <button onclick=\"viewRunDetails('${run.id}')\" class=\"link-button\">Details</button>\r\n                    ${run.status === 'failed' ? `<button onclick=\"retryRun('${run.id}')\" class=\"link-button\">Retry</button>` : ''}\r\n                </td>\r\n            </tr>\r\n        `;\r\n    }\r\n\r\n    private async runWorkflow(workflow: 'specify' | 'plan' | 'tasks'): Promise<void> {\r\n        try {\r\n            // Show work item picker dialog\r\n            const workItemId = await this.showWorkItemPicker();\r\n            if (!workItemId) return;\r\n\r\n            // Start workflow\r\n            const runId = await this.orchestrator.startWorkflow(workflow, workItemId, this.currentProject.id);\r\n            \r\n            // Show progress notification\r\n            this.showNotification(`Starting /${workflow} workflow for work item #${workItemId}`, 'info');\r\n            \r\n            // Refresh activity list\r\n            await this.loadRecentActivity();\r\n            \r\n        } catch (error) {\r\n            this.showNotification(`Failed to start workflow: ${error}`, 'error');\r\n        }\r\n    }\r\n\r\n    private async seedRepository(): Promise<void> {\r\n        try {\r\n            const confirmed = await this.showConfirmDialog(\r\n                'Seed Repository',\r\n                'This will create a new branch with Spec Kit configuration files. Continue?'\r\n            );\r\n            \r\n            if (!confirmed) return;\r\n\r\n            this.showNotification('Seeding repository...', 'info');\r\n            \r\n            const result = await this.repositoryService.seedRepository(this.currentProject.id);\r\n            \r\n            if (result.success) {\r\n                this.showNotification(\r\n                    `Repository seeded successfully. PR created: ${result.prUrl}`, \r\n                    'success'\r\n                );\r\n                await this.loadProjectStatus();\r\n            } else {\r\n                throw new Error(result.error);\r\n            }\r\n            \r\n        } catch (error) {\r\n            this.showNotification(`Failed to seed repository: ${error}`, 'error');\r\n        }\r\n    }\r\n\r\n    private async manageLLM(): Promise<void> {\r\n        // Open service connections page\r\n        const url = `${this.currentProject.webUrl}/_settings/adminservices`;\r\n        window.open(url, '_blank');\r\n    }\r\n\r\n    private async testLLMConnection(): Promise<void> {\r\n        try {\r\n            const connections = await this.llmService.getProjectConnections(this.currentProject.id);\r\n            const defaultConnection = connections.find(c => c.isDefault);\r\n            \r\n            if (!defaultConnection) {\r\n                this.showNotification('No default LLM connection configured', 'warning');\r\n                return;\r\n            }\r\n\r\n            this.showNotification('Testing LLM connection...', 'info');\r\n            \r\n            const result = await this.llmService.testConnection(defaultConnection.id);\r\n            \r\n            if (result.success) {\r\n                this.showNotification(`Connection test successful. Model: ${result.model}`, 'success');\r\n            } else {\r\n                throw new Error(result.error);\r\n            }\r\n            \r\n        } catch (error) {\r\n            this.showNotification(`Connection test failed: ${error}`, 'error');\r\n        }\r\n    }\r\n\r\n    private async showWorkItemPicker(): Promise<number | null> {\r\n        // This would typically open a work item picker dialog\r\n        // For now, prompt for work item ID\r\n        const input = prompt('Enter Work Item ID:');\r\n        return input ? parseInt(input, 10) : null;\r\n    }\r\n\r\n    private async showConfirmDialog(title: string, message: string): Promise<boolean> {\r\n        return confirm(`${title}\\n\\n${message}`);\r\n    }\r\n\r\n    private showNotification(message: string, type: 'info' | 'success' | 'warning' | 'error'): void {\r\n        // This would typically use Azure DevOps notification service\r\n        const color = {\r\n            info: '#0078d4',\r\n            success: '#107c10',\r\n            warning: '#ff8c00',\r\n            error: '#d13438'\r\n        }[type];\r\n\r\n        console.log(`%c${message}`, `color: ${color}; font-weight: bold;`);\r\n        \r\n        // Show browser notification as fallback\r\n        if (Notification.permission === 'granted') {\r\n            new Notification('Spec Kit', { body: message });\r\n        }\r\n    }\r\n\r\n    private openSettings(): void {\r\n        // This would open extension settings\r\n        console.log('Opening settings...');\r\n    }\r\n\r\n    private viewAnalytics(): void {\r\n        // This would open analytics dashboard\r\n        console.log('Opening analytics...');\r\n    }\r\n\r\n    private exportData(): void {\r\n        // This would export telemetry data\r\n        console.log('Exporting data...');\r\n    }\r\n}\r\n\r\n// Global functions for HTML event handlers\r\n(window as any).openWorkItem = (id: number) => {\r\n    const url = `${window.location.origin}/${encodeURIComponent(document.title)}/_workitems/edit/${id}`;\r\n    window.open(url, '_blank');\r\n};\r\n\r\n(window as any).viewRunDetails = (runId: string) => {\r\n    console.log('Viewing run details:', runId);\r\n};\r\n\r\n(window as any).retryRun = (runId: string) => {\r\n    console.log('Retrying run:', runId);\r\n};\r\n\r\n// Initialize the hub\r\nconst hub = new SpecKitHub();\r\nhub.initialize().catch(console.error);","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t416: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkspec_kit_azure_devops_extension\"] = self[\"webpackChunkspec_kit_azure_devops_extension\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [76], () => (__webpack_require__(234)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","window","openWorkItem","id","url","location","origin","encodeURIComponent","document","title","open","viewRunDetails","runId","console","log","retryRun","constructor","this","orchestrator","SpecKitOrchestrator","repositoryService","RepositoryService","telemetryService","TelemetryService","llmService","LLMService","initialize","SDK","init","ready","projectService","getService","currentProject","getProject","setupEventHandlers","loadProjectStatus","loadRecentActivity","getElementById","addEventListener","runWorkflow","seedRepository","openSettings","viewAnalytics","exportData","manageLLM","testLLMConnection","statusElement","status","getProjectSpecKitStatus","innerHTML","renderProjectStatus","error","isSeeded","isRepositorySeeded","llmConnections","getProjectConnections","metrics","getProjectMetrics","length","defaultLLM","find","c","isDefault","name","totalRuns","successRate","avgCost","toFixed","tbody","runs","getRecentRuns","map","run","renderWorkflowRun","join","statusClass","duration","cost","timestamp","toLocaleString","workflow","workItemId","showWorkItemPicker","startWorkflow","showNotification","showConfirmDialog","result","success","Error","prUrl","webUrl","defaultConnection","testConnection","model","input","prompt","parseInt","message","confirm","type","color","info","warning","Notification","permission","body","catch","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","Object","keys","every","key","splice","r","d","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","value","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}