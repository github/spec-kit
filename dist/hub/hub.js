define("hub/hub",[],()=>(()=>{"use strict";var t,e={234:function(t,e,n){var i,o=this&&this.__createBinding||(Object.create?function(t,e,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,i,o)}:function(t,e,n,i){void 0===i&&(i=n),t[i]=e[n]}),s=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),r=this&&this.__importStar||(i=function(t){return i=Object.getOwnPropertyNames||function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[e.length]=n);return e},i(t)},function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n=i(t),r=0;r<n.length;r++)"default"!==n[r]&&o(e,t,n[r]);return s(e,t),e});Object.defineProperty(e,"__esModule",{value:!0});const c=r(n(899)),a=n(844),d=n(616),l=n(677),u=n(661);window.openWorkItem=t=>{const e=`${window.location.origin}/${encodeURIComponent(document.title)}/_workitems/edit/${t}`;window.open(e,"_blank")},window.viewRunDetails=t=>{console.log("Viewing run details:",t)},window.retryRun=t=>{console.log("Retrying run:",t)},(new class{constructor(){this.orchestrator=new a.SpecKitOrchestrator,this.repositoryService=new d.RepositoryService,this.telemetryService=new l.TelemetryService,this.llmService=new u.LLMService}async initialize(){await c.init(),await c.ready();const t=await c.getService("ms.vss-tfs-web.tfs-page-data-service");this.currentProject=await t.getProject(),this.setupEventHandlers(),await this.loadProjectStatus(),await this.loadRecentActivity()}setupEventHandlers(){var t,e,n,i,o,s,r,c,a;null===(t=document.getElementById("run-specify"))||void 0===t||t.addEventListener("click",()=>this.runWorkflow("specify")),null===(e=document.getElementById("run-plan"))||void 0===e||e.addEventListener("click",()=>this.runWorkflow("plan")),null===(n=document.getElementById("run-tasks"))||void 0===n||n.addEventListener("click",()=>this.runWorkflow("tasks")),null===(i=document.getElementById("seed-repo"))||void 0===i||i.addEventListener("click",()=>this.seedRepository()),null===(o=document.getElementById("configure-settings"))||void 0===o||o.addEventListener("click",()=>this.openSettings()),null===(s=document.getElementById("view-analytics"))||void 0===s||s.addEventListener("click",()=>this.viewAnalytics()),null===(r=document.getElementById("export-data"))||void 0===r||r.addEventListener("click",()=>this.exportData()),null===(c=document.getElementById("manage-llm"))||void 0===c||c.addEventListener("click",()=>this.manageLLM()),null===(a=document.getElementById("test-connection"))||void 0===a||a.addEventListener("click",()=>this.testLLMConnection())}async loadProjectStatus(){const t=document.getElementById("project-status");if(t)try{const e=await this.getProjectSpecKitStatus();t.innerHTML=this.renderProjectStatus(e)}catch(e){t.innerHTML=`<div class="error">Failed to load project status: ${e}</div>`}}async getProjectSpecKitStatus(){var t;const e=await this.repositoryService.isRepositorySeeded(this.currentProject.id),n=await this.llmService.getProjectConnections(this.currentProject.id),i=await this.telemetryService.getProjectMetrics(this.currentProject.id);return{isSeeded:e,llmConnections:n.length,defaultLLM:(null===(t=n.find(t=>t.isDefault))||void 0===t?void 0:t.name)||"None",totalRuns:i.totalRuns||0,successRate:i.successRate||0,avgCost:i.avgCost||0}}renderProjectStatus(t){return`\n            <div class="status-grid">\n                <div class="status-item">\n                    <strong>Repository Status:</strong> \n                    <span class="${t.isSeeded?"status-success":"status-warning"}">\n                        ${t.isSeeded?"✅ Seeded":"⚠️ Not Seeded"}\n                    </span>\n                </div>\n                <div class="status-item">\n                    <strong>LLM Connections:</strong> ${t.llmConnections}\n                </div>\n                <div class="status-item">\n                    <strong>Default LLM:</strong> ${t.defaultLLM}\n                </div>\n                <div class="status-item">\n                    <strong>Total Runs:</strong> ${t.totalRuns}\n                </div>\n                <div class="status-item">\n                    <strong>Success Rate:</strong> ${(100*t.successRate).toFixed(1)}%\n                </div>\n                <div class="status-item">\n                    <strong>Avg Cost per Run:</strong> $${t.avgCost.toFixed(3)}\n                </div>\n            </div>\n        `}async loadRecentActivity(){const t=document.getElementById("history-tbody");if(t)try{const e=await this.telemetryService.getRecentRuns(this.currentProject.id,10);t.innerHTML=e.map(t=>this.renderWorkflowRun(t)).join("")}catch(e){t.innerHTML=`<tr><td colspan="7" class="error">Failed to load activity: ${e}</td></tr>`}}renderWorkflowRun(t){const e=`status-${t.status}`,n=t.duration?`${(t.duration/1e3).toFixed(1)}s`:"-",i=t.cost?`$${t.cost.toFixed(3)}`:"-";return`\n            <tr>\n                <td>${t.timestamp.toLocaleString()}</td>\n                <td><code>/${t.workflow}</code></td>\n                <td><a href="#" onclick="openWorkItem(${t.workItemId})">#${t.workItemId}</a></td>\n                <td><span class="status-badge ${e}">${t.status}</span></td>\n                <td>${n}</td>\n                <td class="cost-info">${i}</td>\n                <td>\n                    <button onclick="viewRunDetails('${t.id}')" class="link-button">Details</button>\n                    ${"failed"===t.status?`<button onclick="retryRun('${t.id}')" class="link-button">Retry</button>`:""}\n                </td>\n            </tr>\n        `}async runWorkflow(t){try{const e=await this.showWorkItemPicker();if(!e)return;await this.orchestrator.startWorkflow(t,e,this.currentProject.id),this.showNotification(`Starting /${t} workflow for work item #${e}`,"info"),await this.loadRecentActivity()}catch(t){this.showNotification(`Failed to start workflow: ${t}`,"error")}}async seedRepository(){try{if(!await this.showConfirmDialog("Seed Repository","This will create a new branch with Spec Kit configuration files. Continue?"))return;this.showNotification("Seeding repository...","info");const t=await this.repositoryService.seedRepository(this.currentProject.id);if(!t.success)throw new Error(t.error);this.showNotification(`Repository seeded successfully. PR created: ${t.prUrl}`,"success"),await this.loadProjectStatus()}catch(t){this.showNotification(`Failed to seed repository: ${t}`,"error")}}async manageLLM(){const t=`${this.currentProject.webUrl}/_settings/adminservices`;window.open(t,"_blank")}async testLLMConnection(){try{const t=(await this.llmService.getProjectConnections(this.currentProject.id)).find(t=>t.isDefault);if(!t)return void this.showNotification("No default LLM connection configured","warning");this.showNotification("Testing LLM connection...","info");const e=await this.llmService.testConnection(t.id);if(!e.success)throw new Error(e.error);this.showNotification(`Connection test successful. Model: ${e.model}`,"success")}catch(t){this.showNotification(`Connection test failed: ${t}`,"error")}}async showWorkItemPicker(){const t=prompt("Enter Work Item ID:");return t?parseInt(t,10):null}async showConfirmDialog(t,e){return confirm(`${t}\n\n${e}`)}showNotification(t,e){const n={info:"#0078d4",success:"#107c10",warning:"#ff8c00",error:"#d13438"}[e];console.log(`%c${t}`,`color: ${n}; font-weight: bold;`),"granted"===Notification.permission&&new Notification("Spec Kit",{body:t})}openSettings(){console.log("Opening settings...")}viewAnalytics(){console.log("Opening analytics...")}exportData(){console.log("Exporting data...")}}).initialize().catch(console.error)}},n={};function i(t){var o=n[t];if(void 0!==o)return o.exports;var s=n[t]={exports:{}};return e[t].call(s.exports,s,s.exports,i),s.exports}i.m=e,t=[],i.O=(e,n,o,s)=>{if(!n){var r=1/0;for(l=0;l<t.length;l++){for(var[n,o,s]=t[l],c=!0,a=0;a<n.length;a++)(!1&s||r>=s)&&Object.keys(i.O).every(t=>i.O[t](n[a]))?n.splice(a--,1):(c=!1,s<r&&(r=s));if(c){t.splice(l--,1);var d=o();void 0!==d&&(e=d)}}return e}s=s||0;for(var l=t.length;l>0&&t[l-1][2]>s;l--)t[l]=t[l-1];t[l]=[n,o,s]},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t={416:0};i.O.j=e=>0===t[e];var e=(e,n)=>{var o,s,[r,c,a]=n,d=0;if(r.some(e=>0!==t[e])){for(o in c)i.o(c,o)&&(i.m[o]=c[o]);if(a)var l=a(i)}for(e&&e(n);d<r.length;d++)s=r[d],i.o(t,s)&&t[s]&&t[s][0](),t[s]=0;return i.O(l)},n=self.webpackChunkspec_kit_azure_devops_extension=self.webpackChunkspec_kit_azure_devops_extension||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})();var o=i.O(void 0,[76],()=>i(234));return i.O(o)})());
//# sourceMappingURL=hub.js.map