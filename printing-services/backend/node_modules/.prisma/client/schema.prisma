generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String            @id @default(cuid())
  email                 String            @unique
  passwordHash          String
  firstName             String
  lastName              String
  role                  String            @default("CUSTOMER")
  status                String            @default("PENDING")
  emailVerified         Boolean           @default(false)
  emailVerifiedAt       DateTime?
  phone                 String?
  companyName           String?
  businessNumber        String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  lastLoginAt           DateTime?
  printingRequests      PrintingRequest[]
  proposals             Proposal[]
  customerConversations Conversation[]    @relation("CustomerConversations")
  brokerConversations   Conversation[]    @relation("BrokerConversations")
  sentMessages          Message[]         @relation("SentMessages")

  @@map("users")
}

model PrintingRequest {
  id            String         @id @default(cuid())
  title         String
  description   String?
  specs         String
  status        String         @default("PENDING")
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  proposals     Proposal[]
  conversations Conversation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("printing_requests")
}

model Proposal {
  id           String          @id @default(cuid())
  requestId    String
  request      PrintingRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  brokerId     String
  broker       User            @relation(fields: [brokerId], references: [id], onDelete: Cascade)
  price        Float
  deliveryDays Int
  description  String?
  status       String          @default("PENDING")
  transaction  Transaction?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@map("proposals")
}

model Transaction {
  id              String    @id @default(cuid())
  proposalId      String    @unique
  proposal        Proposal  @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  stripeSessionId String    @unique
  amount          Float
  currency        String    @default("USD")
  status          String    @default("PENDING")
  metadata        String?
  receiptUrl      String?
  paidAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("transactions")
}

model Conversation {
  id           String          @id @default(cuid())
  requestId    String
  request      PrintingRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  customerId   String
  customer     User            @relation("CustomerConversations", fields: [customerId], references: [id], onDelete: Cascade)
  brokerId     String
  broker       User            @relation("BrokerConversations", fields: [brokerId], references: [id], onDelete: Cascade)
  status       String          @default("ACTIVE")
  lastActivity DateTime        @default(now())
  messages     Message[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@unique([requestId, customerId, brokerId])
  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId       String
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  content        String
  attachments    String?
  readAt         DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("messages")
}
