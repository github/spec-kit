# Guard: G005
# Name: mvp-completion
# Type: mvp-validation
# Auto-generated by specify guard create --type mvp-validation --name mvp-completion

import sys
from pathlib import Path

def test_mvp_completion():
    """Validate MVP completion criteria for Guard CLI v0.0.25."""
    project_root = Path("/home/royceld/Programming/Personal/spec-kit")
    errors = []
    
    # 1. Check version is 0.0.25
    pyproject = project_root / "pyproject.toml"
    if pyproject.exists():
        content = pyproject.read_text()
        if 'version = "0.0.25"' not in content:
            errors.append("❌ Version is not 0.0.25 in pyproject.toml")
    else:
        errors.append("❌ pyproject.toml not found")
    
    # 2. Check only MVP guard types exist (unit-pytest, api)
    types_dir = project_root / "guards" / "types"
    if types_dir.exists():
        type_dirs = [d.name for d in types_dir.iterdir() if d.is_dir()]
        expected_types = {"unit-pytest", "api"}
        if set(type_dirs) != expected_types:
            errors.append(f"❌ Guard types mismatch. Expected: {expected_types}, Found: {set(type_dirs)}")
    else:
        errors.append("❌ guards/types/ directory not found")
    
    # 3. Check CHANGELOG.md is updated with v0.0.25
    changelog = project_root / "CHANGELOG.md"
    if changelog.exists():
        content = changelog.read_text()
        if "0.0.25" not in content:
            errors.append("❌ CHANGELOG.md does not contain version 0.0.25")
    else:
        errors.append("❌ CHANGELOG.md not found")
    
    # 4. Check no non-MVP guard types in guards/types/
    non_mvp_types = {"database", "lint-ruff", "docker-playwright"}
    if types_dir.exists():
        existing_types = [d.name for d in types_dir.iterdir() if d.is_dir()]
        found_non_mvp = set(existing_types) & non_mvp_types
        if found_non_mvp:
            errors.append(f"❌ Non-MVP guard types found: {found_non_mvp}")
    
    # Print results
    if errors:
        print("\n❌ MVP Validation Failed:\n")
        for error in errors:
            print(f"  {error}")
        print()
        assert False, "MVP validation failed"
    else:
        print("\n✓ MVP Validation Passed")
        print("  ✓ Version = 0.0.25")
        print("  ✓ Only MVP guard types present (unit-pytest, api)")
        print("  ✓ CHANGELOG.md updated")
        print("  ✓ No non-MVP artifacts")
        print()

if __name__ == "__main__":
    test_mvp_completion()