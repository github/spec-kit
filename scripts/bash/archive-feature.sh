#!/usr/bin/env bash
# Archive a completed feature specification
set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/common.sh"

JSON_MODE=false
FEATURE_ID=""

for arg in "$@"; do
    case "$arg" in
        --json) JSON_MODE=true ;;
        --help|-h)
            echo "Usage: $0 [--json] [feature-id]"
            echo ""
            echo "Archive a completed feature specification to archive/ directory"
            echo ""
            echo "Options:"
            echo "  --json          Output in JSON format"
            echo "  feature-id      Specific feature to archive (default: current branch)"
            echo ""
            echo "Examples:"
            echo "  $0                              # Archive current branch feature"
            echo "  $0 proj-123.my-feature          # Archive specific feature"
            echo "  $0 --json proj-123.my-feature   # JSON output"
            exit 0
            ;;
        *) FEATURE_ID="$arg" ;;
    esac
done

# Detect workspace mode
WORKSPACE_ROOT=$(get_workspace_root)
IS_WORKSPACE_MODE=false
if [[ -n "$WORKSPACE_ROOT" ]]; then
    IS_WORKSPACE_MODE=true
    SPECS_DIR="$WORKSPACE_ROOT/specs"
    ARCHIVE_DIR="$WORKSPACE_ROOT/archive"
else
    REPO_ROOT=$(get_repo_root)
    SPECS_DIR="$REPO_ROOT/specs"
    ARCHIVE_DIR="$REPO_ROOT/archive"
fi

# Get feature ID from branch if not provided
if [ -z "$FEATURE_ID" ]; then
    CURRENT_BRANCH=$(get_current_branch)
    FEATURE_ID=$(get_feature_id "$CURRENT_BRANCH")
fi

FEATURE_DIR="$SPECS_DIR/$FEATURE_ID"

# Validation
if [ ! -d "$FEATURE_DIR" ]; then
    if $JSON_MODE; then
        echo "{\"error\": \"Feature directory not found: $FEATURE_DIR\"}"
    else
        echo "ERROR: Feature directory not found: $FEATURE_DIR" >&2
    fi
    exit 1
fi

# Create archive directory if it doesn't exist
mkdir -p "$ARCHIVE_DIR"

# Create timestamped archive
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
ARCHIVE_TARGET="$ARCHIVE_DIR/${FEATURE_ID}-${TIMESTAMP}"

# Count artifacts before moving
ARTIFACT_COUNT=$(find "$FEATURE_DIR" -type f -name "*.md" | wc -l | tr -d ' ')
TOTAL_FILES=$(find "$FEATURE_DIR" -type f | wc -l | tr -d ' ')

# Move feature to archive
mv "$FEATURE_DIR" "$ARCHIVE_TARGET"

# Create completion report
cat > "$ARCHIVE_TARGET/completion-report.md" <<EOF
# Feature Completion Report: $FEATURE_ID

**Archived**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
**Original Location**: specs/$FEATURE_ID/
**Archive Location**: archive/${FEATURE_ID}-${TIMESTAMP}/

## Summary

Feature development completed and archived for historical reference.

## Artifacts Archived

**Total Files**: $TOTAL_FILES
**Markdown Files**: $ARTIFACT_COUNT

### Contents
\`\`\`
$(cd "$ARCHIVE_TARGET" && find . -type f -name "*.md" | sort | sed 's|^\./||')
\`\`\`

## Specification Files

$(cd "$ARCHIVE_TARGET" && find . -type f -name "*.md" | sort | while read file; do
    basename=$(basename "$file")
    echo "- **$basename**: $(head -1 "$file" | sed 's/^# //')"
done)

## Status

✅ Feature development completed
✅ Specification archived
✅ Available for historical reference

## Notes

- All specification artifacts preserved
- Git history maintained in repository
- Can be referenced in future related work
- To restore: \`mv archive/${FEATURE_ID}-${TIMESTAMP} specs/$FEATURE_ID\`

---

*Generated by spec-kit archive command*
EOF

# Output results
if $JSON_MODE; then
    echo "{\"status\": \"success\", \"archive_path\": \"$ARCHIVE_TARGET\", \"feature_id\": \"$FEATURE_ID\", \"timestamp\": \"$TIMESTAMP\", \"artifacts\": $ARTIFACT_COUNT, \"total_files\": $TOTAL_FILES}"
else
    echo "✓ Feature archived successfully"
    echo ""
    echo "  Feature ID: $FEATURE_ID"
    echo "  Archived to: archive/${FEATURE_ID}-${TIMESTAMP}/"
    echo "  Total files: $TOTAL_FILES"
    echo "  Markdown docs: $ARTIFACT_COUNT"
    echo ""
    echo "  Completion report: archive/${FEATURE_ID}-${TIMESTAMP}/completion-report.md"
    echo ""
    echo "To view report:"
    echo "  cat archive/${FEATURE_ID}-${TIMESTAMP}/completion-report.md"
fi
