#!/usr/bin/env python3
"""
Release Script Generator for Spec Kit

Generates create-github-release.sh dynamically from AGENT_CONFIG.
This ensures all agents are included in releases.

Usage:
    python scripts/generate-release-script.py --check   # Verify current script
    python scripts/generate-release-script.py --update  # Update release script
"""

import sys
from pathlib import Path
from typing import List
import ast


def set_utf8_output():
    """Set UTF-8 encoding for stdout/stderr on Windows."""
    if sys.platform == 'win32':
        import io
        sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
        sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')


def load_agent_config():
    """Load AGENT_CONFIG from __init__.py without importing dependencies."""
    init_file = Path(__file__).parent.parent / "src" / "specify_cli" / "__init__.py"
    
    if not init_file.exists():
        raise FileNotFoundError(f"Cannot find {init_file}")
    
    # Parse AGENT_CONFIG using AST for security
    with open(init_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    tree = ast.parse(content)
    
    for node in ast.walk(tree):
        if isinstance(node, ast.Assign):
            for target in node.targets:
                if isinstance(target, ast.Name) and target.id == 'AGENT_CONFIG':
                    if isinstance(node.value, ast.Dict):
                        # Safely evaluate the dictionary using ast.literal_eval
                        return ast.literal_eval(node.value)
    
    raise ValueError("Could not find AGENT_CONFIG in __init__.py")


AGENT_CONFIG = load_agent_config()


def generate_release_script() -> str:
    """Generate the complete create-github-release.sh script"""
    
    # Generate asset list
    asset_lines = []
    for agent_key in sorted(AGENT_CONFIG.keys()):
        asset_lines.append(f'  .genreleases/spec-kit-template-{agent_key}-sh-"$VERSION".zip \\')
        asset_lines.append(f'  .genreleases/spec-kit-template-{agent_key}-ps-"$VERSION".zip \\')
    
    # Remove trailing backslash from last line
    if asset_lines:
        asset_lines[-1] = asset_lines[-1].rstrip(' \\')
    
    assets_block = "\n".join(asset_lines)
    
    script = f'''#!/usr/bin/env bash
set -euo pipefail

# create-github-release.sh
# Create a GitHub release with all template zip files
# Usage: create-github-release.sh <version>
#
# NOTE: This file is AUTO-GENERATED from AGENT_CONFIG in src/specify_cli/__init__.py
# To update this script, run: python scripts/generate-release-script.py --update
# Do not edit this file manually - your changes will be overwritten!

if [[ $# -ne 1 ]]; then
  echo "Usage: $0 <version>" >&2
  exit 1
fi

VERSION="$1"

# Remove 'v' prefix from version for release title
VERSION_NO_V=${{VERSION#v}}

echo "Creating GitHub release for $VERSION with {len(AGENT_CONFIG)} agents..."
echo "Total assets: {len(AGENT_CONFIG) * 2} (2 per agent: sh and ps)"

# Verify all asset files exist before creating release
echo "Verifying asset files..."
MISSING_FILES=0
for ASSET in \\
{assets_block}
do
  ASSET_PATH=$(echo "$ASSET" | sed 's/"$VERSION"/'"$VERSION"'/g')
  if [[ ! -f "$ASSET_PATH" ]]; then
    echo "  ‚ùå Missing: $ASSET_PATH"
    MISSING_FILES=$((MISSING_FILES + 1))
  fi
done

if [[ $MISSING_FILES -gt 0 ]]; then
  echo ""
  echo "‚ùå Error: $MISSING_FILES asset file(s) missing"
  echo "Run create-release-packages.sh first to generate all assets"
  exit 1
fi

echo "‚úÖ All asset files verified"
echo ""

# Create GitHub release with all assets
gh release create "$VERSION" \\
{assets_block} \\
  --title "Spec Kit Templates - $VERSION_NO_V" \\
  --notes-file release_notes.md

echo ""
echo "‚úÖ Release $VERSION created successfully with {len(AGENT_CONFIG) * 2} assets"
'''
    
    return script


def update_release_script(repo_root: Path) -> bool:
    """Update the create-github-release.sh script"""
    script_path = repo_root / ".github/workflows/scripts/create-github-release.sh"
    
    if not script_path.exists():
        print(f"‚ùå Release script not found at {script_path}")
        return False
    
    new_content = generate_release_script()
    old_content = script_path.read_text(encoding="utf-8")
    
    if old_content == new_content:
        print("‚úÖ Release script is already up to date")
        return True
    
    # Backup old script
    backup_path = script_path.with_suffix(".sh.bak")
    backup_path.write_text(old_content, encoding="utf-8")
    print(f"üì¶ Backed up old script to {backup_path.name}")
    
    # Write new script
    script_path.write_text(new_content, encoding="utf-8")
    print(f"‚úÖ Updated {script_path.name}")
    print(f"   - Now includes {len(AGENT_CONFIG)} agents")
    print(f"   - Total assets: {len(AGENT_CONFIG) * 2}")
    
    return True


def check_release_script(repo_root: Path) -> bool:
    """Check if release script includes all agents"""
    script_path = repo_root / ".github/workflows/scripts/create-github-release.sh"
    
    if not script_path.exists():
        print(f"‚ùå Release script not found at {script_path}")
        return False
    
    content = script_path.read_text(encoding="utf-8")
    
    issues = []
    
    # Check if script is auto-generated
    if "AUTO-GENERATED" not in content:
        issues.append("Script is not marked as auto-generated")
    
    # Check for each agent
    for agent_key in AGENT_CONFIG.keys():
        if f"spec-kit-template-{agent_key}-sh" not in content:
            issues.append(f"Missing shell package for agent: {agent_key}")
        if f"spec-kit-template-{agent_key}-ps" not in content:
            issues.append(f"Missing PowerShell package for agent: {agent_key}")
    
    if issues:
        print("‚ùå Release script has issues:")
        for issue in issues:
            print(f"  - {issue}")
        print(f"\nExpected {len(AGENT_CONFIG)} agents with 2 packages each ({len(AGENT_CONFIG) * 2} total)")
        print("Run with --update to fix")
        return False
    
    print(f"‚úÖ Release script is valid")
    print(f"   - Includes all {len(AGENT_CONFIG)} agents")
    print(f"   - Total assets: {len(AGENT_CONFIG) * 2}")
    return True


def main():
    import argparse
    
    # Set UTF-8 encoding for Windows console
    set_utf8_output()
    
    parser = argparse.ArgumentParser(
        description="Generate create-github-release.sh from AGENT_CONFIG"
    )
    parser.add_argument("--check", action="store_true", 
                       help="Check if release script is up to date")
    parser.add_argument("--update", action="store_true",
                       help="Update release script")
    parser.add_argument("--output", action="store_true",
                       help="Print generated script to stdout")
    
    args = parser.parse_args()
    
    repo_root = Path(__file__).parent.parent
    
    if args.output:
        print(generate_release_script())
        return 0
    
    if args.check:
        success = check_release_script(repo_root)
        return 0 if success else 1
    
    if args.update:
        success = update_release_script(repo_root)
        return 0 if success else 1
    
    # Default: show what would be generated
    parser.print_help()
    print(f"\nüìä Current AGENT_CONFIG has {len(AGENT_CONFIG)} agents:")
    for agent_key, config in sorted(AGENT_CONFIG.items()):
        print(f"  - {agent_key:15} ({config['name']})")
    print(f"\nThis will generate {len(AGENT_CONFIG) * 2} release assets (2 per agent)")
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
